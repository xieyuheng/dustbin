develop category_t {
  class terminal_t extends object_t {
    property(x: object_t): exists(
      f: morphism_t(x, this),
      forall(g: morphism_t(x, this)) -> eqv_t(f, g))
  }

  terminal_unique_up_to_unique_isomorphism(
    x: terminal_t,
    y: terminal_t,
  ): exists(
    f: iso_t(x, y),
    forall(g: iso_t(x, y)) -> eqv_t(f, g),
  ) = {
    tuple(xy, xy_unique) = x.property(y)
    tuple(xx, xx_unique) = x.property(x)
    tuple(yy, yy_unique) = y.property(y)
    f = new iso_t(x, y) extends xx {
      inverse = yx
      left_inverse: eqv_t(compose(xy, yx), id(x)) = {
        e1 = xx_unique(compose(xy, yx)): eqv_t(xx, compose(xy, yx))
        e2 = xx_unique(id(x)): eqv_t(xx, id(x))
        eqv_compose(eqv_swap(e1), e2)
      }
      right_inverse: eqv_t(compose(yx, xy), id(y)) = {
        e1 = yy_unique(compose(yx, xy)): eqv_t(yy, compose(yx, xy))
        e2 = yy_unique(id(y)): eqv_t(yy, id(y))
        eqv_compose(eqv_swap(e1), e2)
      }
    }
    tuple(f, (g: iso_t(x, y)) => xy_unique(g))
  }
}
