develop category_t {
  class terminal_t {
    object : object_t
    morphism : { x : object_t -> morphism_t(x, object) }
    morphism_unique : {
      suppose x : object_t
      f : morphism_t(x, object)
      g : morphism_t(x, object)
      -> the_equation_t(morphism_t(x, object), f, g)
    }
  }

  terminal_iso : {
    x, y : terminal_t
    -> iso_t(x.object, y.object)
  } = {
    f = x.morphism(y.object)
    g = y.morphism(x.object)
    => iso_t(x.object, y.object) {
      morphism = f
      inverse = g
      inverse_left = x.morphism_unique(compose(f, g), id(x.object))
      inverse_right = y.morphism_unique(compose(g, f), id(y.object))
    }
  }

  terminal_iso_unique : {
    suppose x, y : terminal_t
    f : iso_t(x.object, y.object)
    g : iso_t(x.object, y.object)
    -> the_equation_t(iso_t(x.object, y.object), f, g)
  } = {
    iso = iso_t(x.object, y.object) {
      morphism = y.morphism_unique(f, g)
      inverse = y.morphism_unique(f, g)
    }
    => same(iso)
  }
}
