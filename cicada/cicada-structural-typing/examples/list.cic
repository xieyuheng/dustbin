class unit_t {}
unit = {}

class nat_t {}
class zero_t {}
class succ_t { prev : nat_t }

succ : { x : nat_t -> succ_t } = {
  x : nat_t => {
    prev = x
  }
}

zero = {}
one = succ(zero)
two = succ(one)
three = succ(two)
four = succ(three)
five = succ(four)

class list_t { A : type }
class null_t { A : type }
class cons_t {
  A : type
  car : A
  cdr : list_t(A)
}

null_unit : null_t(unit_t) = { A = unit_t }

list_cons_unit : {
  unit_list : list_t(unit_t) -> cons_t(unit_t)
} = {
  unit_list : list_t(unit_t) => {
    A = unit_t
    car = unit
    cdr = unit_list
  }
}

list_length : { A : type, x : list_t(A) -> nat_t } = {
  case A : type, x : cons_t(A) => succ(list_length(A, x.cdr))
  case A : type, x : null_t(A) => zero
}

@eq list_length(unit_t, null_unit) = zero
@eq list_length(unit_t, list_cons_unit(null_unit)) = one
@eq list_length(unit_t, list_cons_unit(list_cons_unit(null_unit))) = two

// NOTE The following is a simple version of `list_length`.

list_length_simple : { x : list_t -> nat_t } = {
  case x : cons_t => succ(list_length_simple(x.cdr))
  case x : null_t => zero
}

@eq list_length_simple(null_unit) = zero
@eq list_length_simple(list_cons_unit(null_unit)) = one
@eq list_length_simple(list_cons_unit(list_cons_unit(null_unit))) = two

list_append : { A : type, x : list_t(A), y : list_t(A) -> list_t(A) } = {
  case A : type, x : cons_t(A), y : list_t(A) => {
    A = A
    car = x.car
    cdr = list_append(A, x.cdr, y)
  }
  case A : type, x : null_t(A), y : list_t(A) => y
}

@eq list_append(unit_t, null_unit, null_unit) = null_unit
@eq list_append(unit_t, list_cons_unit(null_unit), null_unit) = list_cons_unit(null_unit)
@eq list_append(unit_t, null_unit, list_cons_unit(null_unit)) = list_cons_unit(null_unit)
@eq list_append(unit_t, list_cons_unit(null_unit), list_cons_unit(null_unit))
  = list_cons_unit(list_cons_unit(null_unit))

null_one : null_t(succ_t) = { A = succ_t }

list_cons_one : {
  one_list : list_t(succ_t)
  -> list_t(succ_t)
} = {
  one_list : list_t(succ_t)
  => {
    A = succ_t
    car = one
    cdr = one_list
  }
}

@eq list_append(succ_t, null_one, null_one) = null_one
@eq list_append(succ_t, list_cons_one(null_one), null_one) = list_cons_one(null_one)
@eq list_append(succ_t, null_one, list_cons_one(null_one)) = list_cons_one(null_one)
@eq list_append(succ_t, list_cons_one(null_one), list_cons_one(null_one))
  = list_cons_one(list_cons_one(null_one))

@accept list_append(
  succ_t,
  list_cons_one(null_one),
  list_cons_one(null_one))
: list_t(succ_t)
